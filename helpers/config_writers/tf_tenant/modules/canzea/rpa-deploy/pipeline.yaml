format_version: 3
pipelines:
    ${tenant_id}-${project}-${workspace}:
        group: ${tenant_id}
        environment_variables:
            PROJECT: ${project}
            TENANT: ${tenant_id}
        materials:
            charts:
                git: https://gitlab.com/ikethecoder/helm-charts.git
                branch: develop
                auto_update: false
            myupstream:
                pipeline: ${tenant_id}-${project}
                stage: deploy

        stages:
        - vault:
            clean_workspace: true
            elastic_profile_id: vault
            artifacts:
            - build:
                source: kube_config
                destination: artifacts
            - build:
                source: env.yaml
                destination: artifacts
            - build:
                source: s3cfg
                destination: artifacts
            tasks:
            - script: |
                vault status

                export VAULT_TOKEN=$(vault write -field token auth/approle/login \
                    role_id=$VAULT_ROLE_ID \
                    secret_id=$VAULT_SECRET_ID)

                vault read -field kube_raw_config secret/tenants/${tenant_id}/cluster > kube_config
                vault read -field data -format yaml secret/tenants/${tenant_id}/services/${project} > env.yaml
                vault read -field data -format json secret/tenants/${tenant_id}/providers/do_s3 > s3cfg

        - deploy:
            clean_workspace: true
            elastic_profile_id: helm211
            tasks:
            - fetch:
                pipeline: ${tenant_id}-${project}-${workspace}
                stage: vault
                job: vault
                source: artifacts
                destination: .

            - script: |

                mkdir -p ~/.kube

                cat artifacts/kube_config | base64 -d > ~/.kube/config

                PARAMS_FROM_VAULT=`cat artifacts/env.yaml | fold -w 200 | awk '{ printf "%4s%s\n","",$0 }'`

                echo "

                replicaCount: 1

                app:
                $PARAMS_FROM_VAULT
                    version: \"$GO_DEPENDENCY_LABEL_MYUPSTREAM\"

                nodeSelector:
                    doks.digitalocean.com/node-pool: ${es_id}-${deploy_workspace}-pool

                image:
                    repository: registry.ops.${domain_name}/${tenant_id}/${project}
                    tag: $GO_DEPENDENCY_LABEL_MYUPSTREAM
                    pullPolicy: Always

                ingress:
                    enabled: true
                    hosts:
                    - ${dns_prefix}.${deploy_workspace}.ws.${domain_name}
                
                
                " > values.local.yaml

                cat values.local.yaml

                helm init --client-only

                helm upgrade $PROJECT --install --recreate-pods --namespace apps -f ./values.local.yaml $PROJECT/.
                

        - deploy_static:
            clean_workspace: true
            elastic_profile_id: cloud-aws
            tasks:
            - fetch:
                pipeline: ${tenant_id}-${project}-${workspace}
                stage: vault
                job: vault
                source: artifacts
                destination: .
            - fetch:
                pipeline: ${tenant_id}-${project}
                stage: build
                job: build
                source: artifacts
                destination: .
            - script: |

                ACCESS_KEY=`cat artifacts/s3cfg | jq -r ".access_key"`
                SECRET_KEY=`cat artifacts/s3cfg | jq -r ".secret_key"`
                BUCKET=`cat artifacts/s3cfg | jq -r ".bucket"`
                RPATH="${dns_prefix}.${workspace}.ws"

                echo "
                [default]
                    access_key = $ACCESS_KEY
                    host_base = sfo2.digitaloceanspaces.com 
                    host_bucket = %(bucket)s.sfo2.digitaloceanspaces.com
                    secret_key = $SECRET_KEY
                    verbosity = INFO
                " > ~/.s3cfg

                (cd artifacts/${cdn_path} && s3cmd sync --acl-public . s3://$BUCKET/$TENANT/$RPATH/)
